import {
  CollectionChild,
  CollectionTree,
  getAllCollections,
} from "@/api/collection";
import { navLinkActiveState } from "@/store/atom";
import { hasChildren } from "@/utils/util";
import { Box, Button, Menu, NavLink, Text } from "@mantine/core";
import React, { MouseEvent, useState } from "react";
import { FcFolder } from "react-icons/fc";
import { useQuery } from "react-query";
import { useNavigate } from "react-router-dom";
import { useRecoilState } from "recoil";
const CollectionItem = () => {
  const collectionQuery = useQuery<CollectionTree>({
    queryKey: "collection_list",
    queryFn: () => getAllCollections(),
    keepPreviousData: true,
    refetchOnWindowFocus: false,
  });

  if (collectionQuery.isLoading) return "Loading...";
  if (collectionQuery.error) return "Error...";
  return (
    <Box w={240}>
      <Text size={"xs"}>Collections</Text>
      {collectionQuery.isLoading
        ? "Loading"
        : collectionQuery.data?.data.map((el) => (
            <MenuItem key={el.id} item={el} />
          ))}
      {}
    </Box>
  );
};

export default CollectionItem;

const MenuItem = ({ item }: { item: CollectionChild }) => {
  const [navLink, setNavLink] = useRecoilState(navLinkActiveState);
  const navigate = useNavigate();
  const [isShown, setIsShown] = useState(false);

  // Show the custom context menu
  const showContextMenu = (event: React.MouseEvent<HTMLButtonElement>) => {
    // Disable the default context menu
    event.preventDefault();

    setIsShown(false);

    setIsShown(true);
  };
  const Component = hasChildren(item?.children) ? MultiLevel : SingleLevel;
  return (
    <>
      <Menu
        shadow="md"
        width={200}
        opened={isShown}
        onChange={setIsShown}
        position={"right"}
      >
        <Menu.Target>
          <Component
            item={item}
            onClick={() => {
              setNavLink(`/collection/${String(item.id)}`);
              navigate(`/collection/${String(item.id)}`);
            }}
            active={navLink == `/collection/${String(item.id)}`}
            onContextMenu={showContextMenu}
          />
        </Menu.Target>

        <Menu.Dropdown>
          <Menu.Label>{item.name}</Menu.Label>

          <Menu.Divider />

          <Menu.Label>Danger zone</Menu.Label>
        </Menu.Dropdown>
      </Menu>
    </>
  );
};

interface Pr {
  item: CollectionChild;
  onClick: () => void;
  active: boolean;
  onContextMenu: (_event: MouseEvent<HTMLButtonElement>) => void;
}

const SingleLevel = React.forwardRef<HTMLButtonElement, Pr>(
  (props: Pr, ref) => {
    const { item, ...rest } = props;

    return (
      <NavLink
        ref={ref}
        key={item.id}
        label={item.name}
        icon={<FcFolder size="1rem" stroke={1.5} />}
        variant={"filled"}
        {...rest}
        childrenOffset={28}
      />
    );
  }
);
SingleLevel.displayName = "SingleLevel";

const MultiLevel = React.forwardRef<HTMLButtonElement, Pr>((props: Pr, ref) => {
  const { item, ...rest } = props;
  const [open, setOpen] = useState(false);
  return (
    <React.Fragment>
      <Button
        style={{
          position: "absolute",
          right: 0,
          zIndex: 20,
          height: "100%",
        }}
        styles={() => ({
          root: {
            "&:hover": {
              backgroundColor: "transparent",
            },
          },
        })}
        mr={"xs"}
        variant={"subtle"}
        onClick={() => setOpen(!open)}
      />

      <NavLink
        ref={ref}
        opened={open}
        key={item.id}
        label={item.name}
        icon={<FcFolder size="1rem" stroke={1.5} />}
        variant={"filled"}
        {...rest}
        childrenOffset={8}
        // rightSection={<span />}
      >
        {item &&
          item.children &&
          item.children.map((child, key) => (
            <MenuItem key={key} item={child} />
          ))}
      </NavLink>
    </React.Fragment>
  );
});

MultiLevel.displayName = "MultiLevel";
